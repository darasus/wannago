// Generated by prisma/post-generate.ts

import { Kysely } from "kysely";
import { PlanetScaleDialect } from "kysely-planetscale";
import { customAlphabet } from "nanoid";
export {prisma} from './prisma';

import type {ColumnType} from 'kysely';
export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;
export type Timestamp = ColumnType<Date, Date | string, Date | string>;

import type {EventRegistrationStatus, UserType, Currency} from './enums';

export type Conversation = {
  id: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
};
export type ConversationLastSeen = {
  id: string;
  lastSeen: Timestamp;
  conversationId: string;
  userId: string | null;
  organizationId: string | null;
};
export type Event = {
  id: string;
  shortId: string;
  title: string;
  description: string | null;
  startDate: Timestamp;
  endDate: Timestamp;
  isPublished: Generated<number>;
  createdAt: Generated<Timestamp>;
  updatedAt: Timestamp;
  maxNumberOfAttendees: number;
  featuredImageSrc: string | null;
  featuredImageWidth: number | null;
  featuredImageHeight: number | null;
  featuredImagePreviewSrc: string | null;
  address: string | null;
  longitude: number | null;
  latitude: number | null;
  organizationId: string | null;
  userId: string | null;
  messageId: string | null;
  preferredCurrency: Currency;
};
export type EventSignUp = {
  id: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Timestamp;
  hasPlusOne: Generated<number | null>;
  status: Generated<EventRegistrationStatus>;
  eventId: string;
  userId: string;
};
export type Follow = {
  id: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  followerUserId: string;
  followingUserId: string | null;
  followingOrganizationId: string | null;
};
export type Message = {
  id: string;
  text: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  conversationId: string;
  userId: string | null;
  organizationId: string | null;
};
export type Organization = {
  id: string;
  name: string;
  email: string;
  logoSrc: string;
  disabled: Generated<number>;
  stripeCustomerId: string | null;
  stripeLinkedAccountId: string | null;
  preferredCurrency: Currency;
};
export type Ticket = {
  id: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Timestamp;
  title: string;
  description: string | null;
  eventId: string;
  price: number;
  maxQuantity: number;
};
export type TicketSale = {
  id: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Timestamp;
  quantity: number;
  ticketId: string;
  userId: string;
  eventId: string;
  eventSignUpId: string | null;
};
export type User = {
  id: string;
  email: string;
  createdAt: Generated<Timestamp>;
  updatedAt: Generated<Timestamp>;
  externalId: string | null;
  firstName: string;
  lastName: string;
  profileImageSrc: string | null;
  type: Generated<UserType>;
  disabled: Generated<number>;
  stripeCustomerId: string | null;
  stripeLinkedAccountId: string | null;
  preferredCurrency: Currency;
};
export type DB = {
  Conversation: Conversation;
  ConversationLastSeen: ConversationLastSeen;
  Event: Event;
  EventSignUp: EventSignUp;
  Follow: Follow;
  Message: Message;
  Organization: Organization;
  Ticket: Ticket;
  TicketSale: TicketSale;
  User: User;
};


export const db = new Kysely<DB>({
  dialect: new PlanetScaleDialect({
    url: process.env.DATABASE_URL,
  }),
});

// Use custom alphabet without special chars for less chaotic, copy-able URLs
// Will not collide for a long long time: https://zelark.github.io/nano-id-cc/
export const genId = customAlphabet("0123456789abcdefghijklmnopqrstuvwxyz", 16);
