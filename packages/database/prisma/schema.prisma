generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Event {
  id                   String        @id @default(uuid())
  shortId              String?       @unique
  title                String        @db.VarChar(255)
  description          String        @db.LongText()
  startDate            DateTime
  endDate              DateTime
  address              String
  isPublished          Boolean?      @default(false)
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  maxNumberOfAttendees Int?
  featuredImageSrc     String?
  longitude            Float?
  latitude             Float?
  organization         Organization? @relation(name: "EventOrganization", fields: [organizationId], references: [id])
  organizationId       String?
  messageId            String?
  eventSignUps         EventSignUp[] @relation(name: "EventSignUps")

  @@index([organizationId])
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  externalId       String?
  firstName        String?
  lastName         String?
  profileImageSrc  String?
  organization     Organization?     @relation(name: "UserOrganization", fields: [organizationId], references: [id])
  organizationId   String?
  eventSignUps     EventSignUp[]     @relation(name: "EventSignUpUser")
  type             UserType          @default(USER)
  emailPreferences EmailPreference[] @relation(name: "EmailPreference")

  @@index([organizationId])
}

model Organization {
  id     String  @id @default(uuid())
  users  User[]  @relation(name: "UserOrganization")
  events Event[] @relation(name: "EventOrganization")
}

model EventSignUp {
  id         String                  @id @default(uuid())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  event      Event                   @relation(name: "EventSignUps", fields: [eventId], references: [id])
  eventId    String
  user       User                    @relation(name: "EventSignUpUser", fields: [userId], references: [id])
  userId     String
  hasPlusOne Boolean?                @default(false)
  // INFO: remove default once production migration is done
  status     EventRegistrationStatus @default(REGISTERED)

  @@index([eventId])
  @@index([userId])
}

enum EventRegistrationStatus {
  REGISTERED
  CANCELLED
  INVITED
}

enum UserType {
  ADMIN
  USER
}

enum EmailType {
  EventSignUp
  EventInvite
  MessageToOrganizer
  MessageToAllAttendees
  AfterRegisterNoCreatedEventFollowUpEmail
}

model EmailPreference {
  id          String    @id @default(uuid())
  newsletters EmailType
  User        User      @relation(name: "EmailPreference", fields: [userId], references: [id])
  userId      String
  isActive    Boolean   @default(true)

  @@index([userId])
}
