generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id                      String        @id @default(uuid())
  shortId                 String        @unique
  title                   String        @db.VarChar(255)
  description             String?       @db.LongText()
  startDate               DateTime
  endDate                 DateTime
  isPublished             Boolean       @default(false)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  maxNumberOfAttendees    Int
  featuredImageSrc        String?
  featuredImageWidth      Int?
  featuredImageHeight     Int?
  featuredImagePreviewSrc String?       @db.LongText()
  streamUrl               String?
  address                 String?
  longitude               Float?
  latitude                Float?
  organization            Organization? @relation(name: "EventOrganization", fields: [organizationId], references: [id])
  organizationId          String?
  user                    User?         @relation(name: "EventUser", fields: [userId], references: [id])
  userId                  String?
  messageId               String?
  eventSignUps            EventSignUp[] @relation(name: "EventSignUps")

  @@index([organizationId])
  @@index([userId])
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  externalId      String?
  firstName       String
  lastName        String
  profileImageSrc String?
  organization    Organization? @relation(name: "UserOrganization", fields: [organizationId], references: [id])
  organizationId  String?
  eventSignUps    EventSignUp[] @relation(name: "EventSignUpUser")
  type            UserType      @default(USER)
  events          Event[]       @relation(name: "EventUser")
  disabled        Boolean       @default(false)

  @@index([organizationId])
}

model Organization {
  id         String  @id @default(uuid())
  externalId String?
  users      User[]  @relation(name: "UserOrganization")
  events     Event[] @relation(name: "EventOrganization")
  name       String? @db.VarChar(255)
  email      String?
  logoSrc    String?
  disabled   Boolean @default(false)
}

model EventSignUp {
  id         String                  @id @default(uuid())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  event      Event                   @relation(name: "EventSignUps", fields: [eventId], references: [id])
  eventId    String
  user       User                    @relation(name: "EventSignUpUser", fields: [userId], references: [id])
  userId     String
  hasPlusOne Boolean?                @default(false)
  // INFO: remove default once production migration is done
  status     EventRegistrationStatus @default(REGISTERED)

  @@index([eventId])
  @@index([userId])
}

enum EventRegistrationStatus {
  REGISTERED
  CANCELLED
  INVITED
}

enum UserType {
  ADMIN
  USER
}
