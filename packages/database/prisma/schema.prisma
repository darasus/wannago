generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id                      String            @id @default(uuid())
  shortId                 String            @unique
  title                   String            @db.VarChar(255)
  description             String?           @db.LongText()
  startDate               DateTime
  endDate                 DateTime
  isPublished             Boolean           @default(false)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  maxNumberOfAttendees    Int
  featuredImageSrc        String?
  featuredImageWidth      Int?
  featuredImageHeight     Int?
  featuredImagePreviewSrc String?           @db.LongText()
  address                 String?
  longitude               Float?
  latitude                Float?
  messageId               String?
  eventSignUps            EventSignUp[]     @relation(name: "EventSignUps")
  tickets                 Ticket[]
  ticketSales             TicketSale[]
  preferredCurrency       Currency
  eventVisibility         EventVisibility   @default(PUBLIC)
  signUpProtection        SignUpProtection  @default(PUBLIC)
  eventVisibilityCode     String?
  signUpProtectionCode    String?
  listing                 Listing           @default(LISTED)
  checkoutSession         CheckoutSession[]
}

enum Listing {
  LISTED
  UNLISTED
}

enum EventVisibility {
  PUBLIC
  PROTECTED
}

enum SignUpProtection {
  PUBLIC
  PROTECTED
}

model Ticket {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  description String?
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     String
  ticketSales TicketSale[]
  price       Int
  maxQuantity Int

  @@index([eventId])
}

model TicketSale {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  quantity          Int
  ticket            Ticket           @relation(fields: [ticketId], references: [id])
  ticketId          String
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  event             Event            @relation(fields: [eventId], references: [id])
  eventId           String
  eventSignUp       EventSignUp?     @relation(fields: [eventSignUpId], references: [id])
  eventSignUpId     String?
  status            TicketSaleStatus @default(COMPLETED)
  checkoutSessionId String?
  checkoutSession   CheckoutSession? @relation(fields: [checkoutSessionId], references: [id])

  @@index([eventSignUpId])
  @@index([eventId])
  @@index([ticketId])
  @@index([userId])
  @@index([checkoutSessionId])
}

enum TicketSaleStatus {
  PENDING
  COMPLETED
  EXPIRED
}

model CheckoutSession {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  expires     DateTime
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  ticketSales TicketSale[]
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     String

  @@index([userId])
  @@index([eventId])
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  email_verified          Boolean?                 @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @default(now()) @updatedAt
  firstName               String
  lastName                String
  profileImageSrc         String?
  eventSignUps            EventSignUp[]            @relation(name: "EventSignUpUser")
  type                    UserType                 @default(USER)
  disabled                Boolean                  @default(false)
  stripeCustomerId        String?
  ticketSale              TicketSale[]
  auth_session            Session[]
  key                     Key[]
  emailVerificationTokens EmailVerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  checkoutSessions        CheckoutSession[]

  @@index([email])
}

model EventSignUp {
  id          String                  @id @default(uuid())
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  hasPlusOne  Boolean?                @default(false)
  status      EventRegistrationStatus @default(REGISTERED) // TODO: remove default once production migration is done
  event       Event                   @relation(name: "EventSignUps", fields: [eventId], references: [id])
  eventId     String
  user        User                    @relation(name: "EventSignUpUser", fields: [userId], references: [id])
  userId      String
  ticketSales TicketSale[]

  @@index([eventId])
  @@index([userId])
}

enum EventRegistrationStatus {
  REGISTERED
  CANCELLED
  INVITED
}

enum UserType {
  ADMIN
  USER
}

enum Currency {
  USD
  EUR
  GBP
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model EmailVerificationToken {
  id      String   @id @unique
  user_id String
  user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  expires DateTime

  @@index([user_id])
}

model PasswordResetToken {
  id      String   @id @unique
  user_id String
  user    User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
  expires DateTime

  @@index([user_id])
}
