generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Event {
  id                      String        @id @default(uuid())
  shortId                 String        @unique
  title                   String        @db.VarChar(255)
  description             String?       @db.LongText()
  startDate               DateTime
  endDate                 DateTime
  isPublished             Boolean       @default(false)
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  maxNumberOfAttendees    Int
  featuredImageSrc        String?
  featuredImageWidth      Int?
  featuredImageHeight     Int?
  featuredImagePreviewSrc String?       @db.LongText()
  address                 String?
  longitude               Float?
  latitude                Float?
  organization            Organization? @relation(name: "EventOrganization", fields: [organizationId], references: [id])
  organizationId          String?
  user                    User?         @relation(name: "EventUser", fields: [userId], references: [id])
  userId                  String?
  messageId               String?
  eventSignUps            EventSignUp[] @relation(name: "EventSignUps")
  tickets                 Ticket[]
  ticketSales             TicketSale[]

  @@index([organizationId])
  @@index([userId])
}

model Ticket {
  id          String       @id @default(uuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  event       Event        @relation(fields: [eventId], references: [id])
  eventId     String
  ticketSales TicketSale[]
  price       Int
  maxQuantity Int

  @@index([eventId])
}

model TicketSale {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  quantity  Int

  @@index([eventId])
  @@index([ticketId])
  @@index([userId])
}

model User {
  id               String                 @id @default(uuid())
  email            String                 @unique
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @default(now()) @updatedAt
  externalId       String?
  firstName        String
  lastName         String
  profileImageSrc  String?
  organization     Organization?          @relation(name: "UserOrganization", fields: [organizationId], references: [id])
  organizationId   String?
  eventSignUps     EventSignUp[]          @relation(name: "EventSignUpUser")
  type             UserType               @default(USER)
  events           Event[]                @relation(name: "EventUser")
  disabled         Boolean                @default(false)
  subscription     Subscription?          @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String?
  stripeCustomerId String?
  messages         Message[]              @relation(name: "UserMessage")
  conversation     Conversation[]         @relation(name: "UserConversation")
  lastSeens        ConversationLastSeen[] @relation(name: "UserConversationLastSeen")
  followers        Follow[]               @relation(name: "FollowingUser")
  following        Follow[]               @relation(name: "FollowerUser")
  ticketSale       TicketSale[]

  @@index([organizationId])
  @@index([subscriptionId])
}

model Organization {
  id               String                 @id @default(uuid())
  users            User[]                 @relation(name: "UserOrganization")
  events           Event[]                @relation(name: "EventOrganization")
  name             String                 @db.VarChar(255)
  email            String                 @unique()
  logoSrc          String
  disabled         Boolean                @default(false)
  subscription     Subscription?          @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String?
  stripeCustomerId String?
  messages         Message[]              @relation(name: "OrganizationMessage")
  conversation     Conversation[]         @relation(name: "OrganizationConversation")
  lastSeens        ConversationLastSeen[] @relation(name: "OrganizationConversationLastSeen")
  followers        Follow[]               @relation(name: "FollowingOrganization")

  @@index([subscriptionId])
}

model EventSignUp {
  id         String                  @id @default(uuid())
  createdAt  DateTime                @default(now())
  updatedAt  DateTime                @updatedAt
  event      Event                   @relation(name: "EventSignUps", fields: [eventId], references: [id])
  eventId    String
  user       User                    @relation(name: "EventSignUpUser", fields: [userId], references: [id])
  userId     String
  hasPlusOne Boolean?                @default(false)
  // INFO: remove default once production migration is done
  status     EventRegistrationStatus @default(REGISTERED)

  @@index([eventId])
  @@index([userId])
}

enum EventRegistrationStatus {
  REGISTERED
  CANCELLED
  INVITED
}

enum UserType {
  ADMIN
  USER
}

enum SubscriptionType {
  PRO
  BUSINESS
}

model Subscription {
  id           String           @id @default(uuid())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  type         SubscriptionType
  expiresAt    DateTime?
  cancelAt     DateTime?
  user         User[]
  organization Organization[]
}

model Conversation {
  id            String                 @id @default(uuid())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @default(now()) @updatedAt
  messages      Message[]
  organizations Organization[]         @relation(name: "OrganizationConversation")
  users         User[]                 @relation(name: "UserConversation")
  lastSeen      ConversationLastSeen[]
}

model Message {
  id             String        @id @default(uuid())
  text           String        @db.LongText()
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User?         @relation(name: "UserMessage", fields: [userId], references: [id])
  userId         String?
  organization   Organization? @relation(name: "OrganizationMessage", fields: [organizationId], references: [id])
  organizationId String?

  @@index([conversationId])
  @@index([userId])
  @@index([organizationId])
}

model ConversationLastSeen {
  id             String        @id @default(uuid())
  lastSeen       DateTime
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  user           User?         @relation(name: "UserConversationLastSeen", fields: [userId], references: [id])
  userId         String?
  organization   Organization? @relation(name: "OrganizationConversationLastSeen", fields: [organizationId], references: [id])
  organizationId String?

  @@index([conversationId])
  @@index([userId])
  @@index([organizationId])
}

model Follow {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  followerUser            User          @relation(name: "FollowerUser", fields: [followerUserId], references: [id])
  followerUserId          String
  followingUser           User?         @relation(name: "FollowingUser", fields: [followingUserId], references: [id])
  followingUserId         String?
  followingOrganization   Organization? @relation(name: "FollowingOrganization", fields: [followingOrganizationId], references: [id])
  followingOrganizationId String?

  @@index([followerUserId])
  @@index([followingUserId])
  @@index([followingOrganizationId])
}
